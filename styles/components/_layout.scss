.flex {
  //items inside a flexRow will automatically be evenly spaced.
  //Usually the children should be divs with no other classes.
  //Flexrows can be nexted inside each other
  display: flex;
  align-items: flex-start;
  width: 100%; //if the element has absolute or fixed positioning, expand it
  height: 100%; //if the container has a height, fill it.
  box-sizing: border-box;
  flex-direction: row; //align children left to right horizontally

  & > * {
    flex: 0 1 auto; // children won't grow, but will shrink
  }
}

//colums and rows

.flexRow {
  @extend .flex;
  //use this to contain columns
  align-items: stretch; //this stretches the items to 100% height
  flex-direction: row;

  &.reverse {
    flex-direction: row-reverse; //right to left
  }

  //use the flush sides class if the children set their own margins and padding
  //use a gutter class from _containers if the container should set the margins

  &.flexFlushSides > *:first-child {
    padding-left: 0;
    margin-left: 0;
  }

  &.flexFlushSides > *:last-child {
    padding-right: 0;
    margin-right: 0;
  }
}

.rowDivV {
  //a vertical divider. Use when you need to separate things without adding a border to one of them
  //use a color class for the background color
  //only works inside of a flexRow, align-items sets the height
  width: 1px;
}

.rowDivH {
  //a horizontal divider. Use when you need to separate vertical elements without adding a border to one of them
  //use a color class for the background color
  //only works inside of a flexRow, align-items sets the width
  height:1px;
}

.flexCol {
  //use the flex col if you need a vertical stack of elements that wants to take advantage of flex positioning
  //if you don't need flex positioning, a vertical stack should have a simple wrapping div
  //you can also use flexCol to flip the order of the items in it without rewriting all the child elements
  @extend .flex;
  flex-direction: column; //align children from top to bottom vertically

  &.reverse {
    flex-direction: column-reverse;
  }

  //use the flush sides class if the children set their own margins and padding
  //use a gutter class from _containers if the container should set the margins

  &.flexFlushSides > *:first-child {
    padding-top: 0;
    margin-top: 0;
  }

  &.flexFlushSides > *:last-child {
    padding-bottom: 0;
    margin-bottom: 0;
  }
}

.flexVCent {
  //creates a container with vertically centered children
  @extend .flex;
  align-items: center;
}

.flexHCent {
  //creates a container with horizontally centered children
  @extend .flex;
  justify-content: center;
  text-align: center;
}

.flexHRight {
  //creates a container with children aligned to the right
  @extend .flex;
  justify-content: flex-end;
  text-align: right;
}

.flexGrow {
  //make a child of a flex element expand to fill the remaining space
  flex-grow: 1;
}

.col {
  //use .col for a column that will adapt to the number of siblings present. 3 col elements will each be 1/3 of the width of the row.
  box-sizing: border-box;
  position: relative;
  flex: 0 0 auto; //do not shrink or grow columns
}

.col12 {
  @extend .col;
  flex-basis: 100%;
  min-width: 100%;
}

.col11 {
  @extend .col;
  flex-basis: 91.66666666666666%;
  max-width: 91.66666666666666%;
}

.col10 {
  @extend .col;
  flex-basis: 83.33333333333334%;
  max-width: 83.33333333333334%;
}

.col9 {
  @extend .col;
  flex-basis: 75%;
  max-width: 75%;
}

.col8 {
  @extend .col;
  flex-basis: 66.66666666666666%;
  max-width: 66.66666666666666%;
}

.col7 {
  @extend .col;
  flex-basis: 58.333333333333336%;
  max-width: 58.333333333333336%;
}

.col6 {
  @extend .col;
  flex-basis: 50%;
  max-width: 50%;
}

.col5 {
  @extend .col;
  flex-basis: 41.66666666666667%;
  max-width: 41.66666666666667%;
}

.col4 {
  @extend .col;
  flex-basis: 33.33333333333333%;
  max-width: 33.33333333333333%;
}

.col3 {
  @extend .col;
  flex-basis: 25%;
  max-width: 25%;
}

.col2 {
  @extend .col;
  flex-basis: 16.666666666666664%;
  max-width: 16.666666666666664%;
}

.col1 {
  @extend .col;
  flex-basis: 8.333333333333332%;
  max-width: 8.333333333333332%;
}

//containers should have one of the standard padding sizes
//padKids classes go on wrapper elements, to make all direct children have that padding

.padSm,
.padSmKids > * {
  padding: $pad / 2;
}

.pad,
.padKids > * {
  padding: $pad;
}

.padBg,
.padBgKids > * {
  padding: $pad * 2;
}
//elements should hae standard spacing between them vertically. There shouldn't be more than a few row classes.

.rowSm {
  margin-bottom: $row / 2;

}
.row {
  margin-bottom: $row;
}

.rowBg {
  margin-bottom: $row * 2;
}

.margRSm {
  margin-right: $marg / 2;
}

.margR {
  margin-right: $marg;
}

.margLSm {
  margin-left: $marg / 2;
}

.margL {
  margin-left: $marg;
}

.gutterHSm > * {
  margin-right: $marg / 2;

  &:last-child {
    margin-right: 0;
  }
}

.gutterH > * {
  margin-right: $marg;

  &:last-child {
    margin-right: 0;
  }
}

.gutterHBg > * {
  margin-right: $marg * 2;

  &:last-child {
    margin-right: 0;
  }
}

.gutterVSm > * {
  margin-bottom: $marg / 2;

  &:last-child {
    margin-bottom: 0;
  }
}

.gutterV > * {
  margin-bottom: $marg;

  &:last-child {
    margin-bottom: 0;
  }
}

.gutterVBg > * {
  margin-bottom: $marg * 2;

  &:last-child {
    margin-bottom: 0;
  }
}

.floR {
  float: right;
}

.floL {
  float: left;
}
